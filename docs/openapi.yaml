swagger: "2.0"
info:
  version: "0.8.0"
  title: "REviewd API"
tags:
- name: "cluster"
- name: "outlier"
- name: "category"
- name: "data_source"
- name: "event"
- name: "event_id"
- name: "indicator"
- name: "qualifier"
- name: "status"
- name: "description"
- name: "template"
schemes:
- "http"
paths:
  /api/cluster:
    get:
      tags: [cluster]
      summary: "Get clusters"
      description: "This endpoint returns clusters in database."
      parameters:
        - name: "filter"
          in: "query"
          description: |
            A JSON encoded value of the filters. Available filters:
              - `category:[string]` array of category names
              - `data_source:[string]` array of data_source names
              - `status:[string]` array of status names
              - `qualifier:[string]` array of qualifier names
              - `cluster_id:[string]` array of cluster_id
              - `detector_id:[integer]` array of detector_id
          type: "string"
        - name: "orderby"
          in: "query"
          description: |
            Specify the column name used to sort the returned data. The data is sorted in ascending order by default. Available column names:
              - `cluster_id`
              - `detector_id`
              - `qualifier`
              - `status`
              - `category`
              - `signature`
              - `data_source`
              - `size`
              - `score`
              - `event_ids`
              - `last_modification_time`
          type: "string"
        - name: "order"
          in: "query"
          description: Use `order=desc` to sort the returned data in descending order. Must be used with orderby query.
          type: "string"
        - name: "page"
          in: "query"
          description: Specify the page of results to return.
          type: integer
        - name: "per_page"
          in: "query"
          description: Specify the number of records to return in one request, specified as an integer from 1 to 100.
          type: integer
        - name: "select"
          in: "query"
          description: |
            A JSON encoded value of the properties which will be returned if data is available in database. Available selects:
              - `cluster_id:<boolean>` When set to `true`, `cluster_id` will be returned
              - `detector_id:<boolean>` When set to `true`, `detector_id` will be returned
              - `qualifier:<boolean>` When set to `true`, `qualifier` will be returned
              - `status:<boolean>` When set to `true`, `status` will be returned
              - `category:<boolean>` When set to `true`, `category` will be returned
              - `signature:<boolean>` When set to `true`, `signature` will be returned
              - `data_source:<boolean>` When set to `true`, `data_source` will be returned
              - `size:<boolean>` When set to `true`, `size` will be returned
              - `score:<boolean>` When set to `true`, `score` will be returned
              - `event_ids:<boolean>` When set to `true`, `event_ids` will be returned
              - `last_modification_time:<boolean>` When set to `true`, `last_modification_time` will be returned
          type: "string"  
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Clusters"
          headers:
            X-REviewd-Total:
              type: "string"
              description: "the total number of records in the database"
            X-REviewd-TotalPages:
              type: "string"
              description: "the total number of pages encompassing all available records"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      tags: [cluster]
      summary: "Update properties for a selected clusters"
      description: "This endpoint is to update one or more clusters. If the same cluster does not exist in database, create it as a new cluster."
      consumes:
      - "application/json"
      produces:
      - "text/plain"
      parameters:
      - in: "body"
        name: "Cluster"
        description: "Clusters to be updated or created"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/ClusterCreateBody"
      responses:
        200:
          description: "Clusters have been successfully updated"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/cluster/{cluster_id}:
    put:
      tags: [cluster]
      summary: "Update cluster_id, qualifier, and/or category for the specified cluster"
      description: "This endpoint is aimed to update cluster_id, qualifier, and/or category of a cluster."
      consumes:
      - "application/json"
      produces:
      - "text/plain"
      parameters:
        - name: "cluster_id"
          in: "path"
          description: "cluster_id of the cluster whose properties are to be updated"
          type: "string"
          required: true
        - name: "data_source"
          in: "query"
          description: "data_source of the cluster whose properties are to be updated"
          type: "string"
          required: true
        - name: "Properties"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/ClusterUpdateBody"
          description: "New values of cluster_id, category, and/or qualifier. At least one of the parameters must be specified to update the cluster."
      responses:
        200:
          description: "Updated cluster successfully"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/cluster/qualifier:
    put:
      tags: [cluster]
      summary: "Update qualifier for a selected clusters"
      description: "This endpoint updates qualifier values for a selected clusters."
      consumes:
      - "application/json"
      produces:
      - "text/plain"
      parameters:
        - name: "qualifier"
          in: "body"
          required: true
          schema:
            type: "array"
            items:
              $ref: "#/definitions/QualifierUpdateBody"
          description: "New values of qualifier. cluster_id and data_source are used to identify the cluster to be updated."
      responses:
        200:
          description: "Updated cluster successfully"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/outlier:
    get:
      tags: [outlier]
      summary: "Get outliers"
      description: "This endpoint returns outliers in database."
      parameters:
      - name: "filter"
        in: "query"
        description: |
          A JSON encoded value of the filters. Available filter:
            - `data_source:[string]` array of data_source names
        type: "string"
      - name: "orderby"
        in: "query"
        description: |
          Specify the column name used to sort the returned data. The data is sorted in ascending order by default. Available column names:
            - `outlier`
            - `data_source`
            - `size`
            - `event_ids`
        type: "string"
      - name: "order"
        in: "query"
        description: Use `order=desc` to sort the returned data in descending order. Must be used with orderby query.
        type: "string"
      - name: "page"
        in: "query"
        description: Specify the page of results to return.
        type: integer
      - name: "per_page"
        in: "query"
        description: Specify the number of records to return in one request, specified as an integer from 1 to 100.
        type: integer
      - name: "select"
        in: "query"
        description: |
          A JSON encoded value of the properties which will be returned if data is available in database. Available selects:
            - `outlier:<boolean>` When set to `true`, `outlier` will be returned
            - `data_source:<boolean>` When set to `true`, `data_source` will be returned
            - `size:<boolean>` When set to `true`, `size` will be returned
            - `event_ids:<boolean>` When set to `true`, `event_ids` will be returned
        type: "string"
      produces:
        - "application/json"
        - "text/plain"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Outlier"
          headers:
            X-REviewd-Total:
              type: "string"
              description: "the total number of records in the database"
            X-REviewd-TotalPages:
              type: "string"
              description: "the total number of pages encompassing all available records"
        500:
          description: "Internal server error"
    put:
      tags: [outlier]
      summary: "Update properties for a selected outliers"
      description: "This endpoint is to update one or more outliers. If the same outlier does not exist in database, create it as a new outlier."
      consumes:
      - "application/json"
      produces:
      - "text/plain"
      parameters:
      - in: "body"
        name: "Outlier"
        description: "Outliers to be updated or inserted to database"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/OutlierCreateBody"
      responses:
        200:
          description: "Outliers have been successfully updated"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags: [outlier]
      summary: "Delete a list of outliers"
      description: "This endpoint is to delete one or more outliers."
      parameters:
        - name: "data_source"
          in: "query"
          description: "data_source"
          type: "string"
          required: true
        - in: "body"
          name: "Outliers"
          description: "Outliers to be updated or inserted to database"
          required: true
          schema:
            type: "array"
            items:
              type: "string"
      responses:
        200:
          description: "Outliers have been successfully deleted"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/category:
    get:
      tags: [category]
      summary: "Get all categories"
      description: "This endpoint returns all categories in database."
      produces:
        - "application/json"
        - "text/plain"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Category"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags: [category]
      summary: "Create a new category"
      description: "This endpoint is for clients to create a new category in database."
      parameters:
        - name: "category"
          in: "query"
          description: "name of the new category"
          required: true
          type: "string"
      produces:
        - "text/plain"
      responses:
        201:
          description: "The new category has been successfully inserted into database"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/category/{category}:
    put:
      tags: [category]
      summary: "Update the value of specified category"
      description: "This endpoint is aimed to update the value of specified category."
      parameters:
        - name: "category"
          in: "path"
          description: "category name"
          type: "string"
          required: true
        - in: "body"
          name: "body"
          description: "New value of category"
          required: true
          schema:
            type: "object"
            properties:
              category:
                type: "string"
                description: "New value of category"
      produces:
        - "application/json"
        - "text/plain"
      responses:
        200:
          description: "The category has been successfully updated"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/data_source:
    get:
      tags: [data_source]
      summary: "Get all data_source"
      description: "This endpoint returns all data_source in database."
      produces:
        - "application/json"
        - "text/plain"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DataSource"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags: [data_source]
      summary: "Create a new data_source"
      description: "This endpoint is for clients to create a new data_source."
      produces:
        - "text/plain"
      parameters:
        - name: "data_source"
          in: "query"
          required: true
          description: The topic name of this data_source.   
          type: "string"
        - name: "data_type"
          in: "query"
          required: true
          description: The data type of this data_source.
          type: "string"
      responses: 
        201:
          description: "Created"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/event/search:
    get:
      tags: [event]
      summary: "Get events"
      description: "This endpoint searches for events using message_id and data_source, and returns a list of events which has the value of raw_event. The maximum number of events to return is 100."
      parameters:
        - name: "data_source"
          in: "query"
          description: "name of the Kafka topic name"
          required: true
          type: "string"
        - name: "filter"
          in: "query"
          description: |
            A JSON encoded value of the filters. Available filter:
              - `message_ids:[u64]` array of message_id
          required: true
          type: "string"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Event"
        400:
          description: "Bad Request"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/event_id:
    get:
      tags: [event_id]
      summary: "Get the value of maximum number of event_ids"
      description: "Retrieve the value of maximum number of event_ids per cluster/outlier"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/MaxEventIdNum"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      tags: [event_id]
      summary: "Update the value of maximum number of event_ids"
      description: "Update the value of maximum number of event_ids per cluster/outlier. If the new value is smaller than the old value, REview will update event_ids of each cluster and outlier whose size of event_ids is greater than the new value."
      parameters:
        - name: "max_event_id_num"
          in: "query"
          description: |
            New value of maximum number of event_ids
          type: "integer"
      produces:
      - "text/plain"
      - "application/json"
      responses:
        200:
          description: "OK"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/indicator:
    get:
      tags: [indicator]
      summary: "Get indicators"
      description: "This endpoint returns indicators in database."
      parameters:
        - name: "filter"
          in: "query"
          description: |
            A JSON encoded value of the filters. Available filters:
              - `name:[string]` array of indicator names
          type: "string"
        - name: "orderby"
          in: "query"
          description: |
            Specify the column name used to sort the returned data. The data is sorted in ascending order by default. Available column names:
              - `indicator_name`
              - `token`
          type: "string"
        - name: "order"
          in: "query"
          description: Use `order=desc` to sort the returned data in descending order. Must be used with orderby query.
          type: "string"
        - name: "page"
          in: "query"
          description: Specify the page of results to return.
          type: integer
        - name: "per_page"
          in: "query"
          description: Specify the number of records to return in one request, specified as an integer from 1 to 100.
          type: integer
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Indicator"
          headers:
            X-REviewd-Total:
              type: "string"
              description: "the total number of records in the database"
            X-REviewd-TotalPages:
              type: "string"
              description: "the total number of pages encompassing all available records"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags: [indicator]
      summary: "Create a new indicator"
      description: "This endpoint is for clients to create a new indicator. The token of new indicator must be array of array of strings in JSON format."
      consumes:
      - "application/json"
      produces:
      - "text/plain"
      parameters:
      - in: "body"
        name: "properties"
        description: "A new indicator to be inserted into the database"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/IndicatorCreateBody"
      responses:
        201:
          description: "Created"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags: [indicator]
      summary: "Delete indicators"
      description: "This endpoint is to delete one or more indicators"
      parameters:
        - name: "all"
          in: "query"
          description: If `all=true`, delete all indicators from the database.
          type: "boolean"
        - name: "name"
          in: "query"
          description: Delete an indicator whose `name` in the database is equal to this value.
          type: "string"
      produces:
      - "plain/text"
      - "application/json"
      responses:
        200:
          description: "OK"
        400:
          description: "Bad Request"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/indicator/{indicator_name}:
    put:
      tags: [indicator]
      summary: "Update indicator_name, data_source, description, and/or token for the specified indicator_name"
      description: "This endpoint is aimed to update indicator_name, data_source, description, and/or token of an indicator. The new token must be array of array of string in JSON format."
      consumes:
      - "application/json"
      produces:
      - "text/plain"
      parameters:
        - name: "indicator_name"
          in: "path"
          description: "indicator_name of the indicator whose properties are to be updated"
          type: "string"
          required: true
        - name: "Properties"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/IndicatorUpdateBody"
          description: "New values of indicator_name, data_source, and/or token. At least one of the parameters must be specified to update the indicator."
      responses:
        200:
          description: "Updated indicator successfully"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/qualifier:
    get:
      tags: [qualifier]
      summary: "Get all qualifiers"
      description: "This endpoint returns all qualifiers in database."
      produces:
        - "application/json"
        - "text/plain"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Qualifier"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/status:
    get:
      tags: [status]
      summary: "Get all status"
      description: "This endpoint returns all status in database."
      produces:
        - "application/json"
        - "text/plain"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Status"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/description:
    get:
      tags: [description]
      summary: "Get descriptions"
      description: "This endpoint returns descriptions in database."
      parameters:
        - name: "cluster_id"
          in: "query"
          description: Specify the cluster_id of a cluster to return descriptions for.
          type: "string"
          required: true
        - name: "data_source"
          in: "query"
          description: Specify the topic name of the source which a cluster originated from.
          type: "string"
          required: true
        - name: "first_event_id"
          in: "query"
          description: Specify the id of first event in the round which a cluster belongs to.
          type: "string"
          required: true
        - name: "last_event_id"
          in: "query"
          description: Specify the id of last event in the round which a cluster belongs to.
          type: "string"
          required: true                    
      produces:
        - "application/json"
        - "text/plain"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DescriptionForCluster"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/ErrorResponse"      
    put:
      tags: [description]
      summary: "Create new descriptions"
      description: "This endpoint is for clients to create descriptions in database."
      consumes:
        - "application/json"
      produces:
        - "text/plain"
      parameters:
        - name: "data_source"
          in: "query"
          description: "data_source topic name of the cluster whose descriptions are to be created"
          type: "string"
          required: true
        - in: "body"
          name: "Description"
          description: "Description to be created"
          required: true
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DescriptionCreateBody"
      responses:
        200:
          description: "The new descriptions have been successfully inserted into database"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/description/round:
    get:
      tags: [description]
      summary: "Get rounds of description for a selected cluster"
      description: "This endpoint returns the information of description rounds for a selected cluster in database."
      produces:
        - "application/json"
        - "text/plain"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/DescriptionRound"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/template:
    get:
      tags: [template]
      summary: "Get a template or all templates"
      description: "This endpoint returns a specified template or all in database."
      produces:
        - "application/json"
        - "text/plain"
      parameters:
        - name: "name"
          type: "string"
          in: "query"
          description: "Return a template with this name. If not given, return all templates."
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Template"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags: [template]
      summary: "Create a new template"
      description: "This endpoint is for clients to create a new template in database."
      consumes:
      - "application/json"
      produces:
      - "text/plain"
      parameters:
        - name: "template"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/TemplateCreateBody"
          description: "New values of template"
      responses:
        201:
          description: "Created template successfully"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
definitions:
  Category:
    type: "object"
    properties:
      category_id:
        type: "integer"
        description: "a unique id for this category"
      category:
        type: "string"
        description: "category name"
  Clusters:
    type: "object"
    properties:
      category:
        type: "string"
        description: "category for this cluster"
      cluster_id:
        type: "string"
        description: "a unique id for this cluster"
      data_source:
        type: "string"
        description: "Kafka topic name"
      detector_id:
        type: "integer"
        format: "uint32"
        description: "detector_id in REconverge config file configured for this cluster"
      event_ids:
        type: "array"
        items:
          type: "integer"
          format: "uint64"
        description: "a list of event ids for this cluster"
      last_modification_time:
        type: "string"
        format: "dateTime"
      qualifier:
        type: "string"
        description: "qualifier for this cluster"
      score:
        type: "number"
        format: "double"
        description: "score for this cluster based on indicator file"
      signature:
        type: "string"
        description: "A signature for this cluster generated by REmake"
      size:
        type: "integer"
        format: "uint64"
        description: "The number of events for this cluster"
      status:
        type: "string"
        description: "status for this cluster"
  ClusterCreateBody:
    type: "object"
    required:
    - "cluster_id"
    - "detector_id"
    - "data_source"
    - "data_source_type"
    properties:
      cluster_id:
        type: "string"
        description: "a unique id for this cluster"
      detector_id:
        type: "integer"
        format: "uint32"
        description: "Detector_id in REconverge config file used for this cluster"
      signature:
        type: "string"
        description: "A signature generated by REmake"
      score:
          type: "number"
          format: "double"
          description: "score for this cluster based on indicator file"
      data_source:
        type: "string"
        description: "Kafka topic name"
      data_source_type:
        type: "string"
        description: "A data type of this Kafka topic"
      size:
        type: "integer"
        format: "uint64"
        description: "The number of events for this cluster"
  ClusterUpdateBody:
    type: "object"
    properties:
      cluster_id:
        type: "string"
        description: "New value of cluster_id"
      category: 
        type: "string"
        description: "New value of category"
      qualifier:
        type: "string"
        description: "New value of qualifier"
  DescriptionCreateBody:
    type: "object"
    required:
    - "cluster_id"
    - "first_event_id"
    - "last_event_id"
    - "description"
    properties:
      cluster_id:
        type: "string"
        description: "cluster_id of the cluster whose descriptions are to be inserted"
      first_event_id:
        type: "integer"
        format: "uint64"
        description: "id of the first event belonging to this round of this cluster"
      last_event_id:
        type: "integer"
        format: "uint64"
        description: "id of the last event beloning to this round of this cluster"
      description:
        type: "array"
        items:
          $ref: "#/definitions/DescriptionForCluster"
  DescriptionForCluster:
    type: "object"
    properties:
      count:
        type: "integer"
        format: "uint64"
      unique_count:
        type: "integer"
        format: "uint64"
      mean:
        type: "number"
        format: "double"
      s-deviation:
        type: "number"
        format: "double"
      min:
        $ref: "#/definitions/DescriptionMin"
      max:
        $ref: "#/definitions/DescriptionMax"
      top_n:
        type: "array"
        items:
          $ref: "#/definitions/DescriptionTopN"
      mode:
        $ref: "#/definitions/DescriptionMode"
  DescriptionMin:
    type: "object"
  DescriptionMax:
    type: "object"
  DescriptionTopN:
    type: "object"
  DescriptionMode:
    type: "object"
  DescriptionRound:
    type: "object"
    required:
    - "first_event_id"
    - "last_event_id"
    properties:
      first_event_id:
        type: "string"
        description: "id of first event belonging to this cluster"
      last_event_id:
        type: "string"
        description: "id of last event belonging to this cluster"
  Event:
    type: "object"
    properties:
      message_id:
        type: "integer"
        format: uint64
        description: "message_id for this event"
      data_source:
        type: "string"
        description: "kafka topic name"
      raw_event:
        type: "array"
        items:
          type: integer
          format: "uint8"
        description: "raw_event for this event"
  Indicator:
    type: "object"
    properties:
      data_source:
        type: "string"
        description: "Kafka topic name"
      description:
        type: "string"
        description: "description of this indicator"
      indicator_name:
        type: "string"
        description: "a unique identifier of this indicator"
      token:
        type: "array"
        items:
          type: "array"
          items:
            type: "string"
        description: "A sequence of tokens"
      last_modification_time:
        type: "string"
        format: "dateTime"
  IndicatorCreateBody:
    type: "object"
    required:
    - "name"
    - "data_source"
    - "token"
    properties:
      name:
        type: "string"
        description: "a unique id for this indicator"
      data_source:
        type: "string"
        description: "Kafka topic name"
      token:
        type: "array"
        items:
          type: "array"
          items:
            type: "string"
        description: "A sequence of tokens for this indicator"
      description:
        type: "string"
        description: "The description for this indicator"
  IndicatorUpdateBody:
    type: "object"
    properties:
      indicator_name:
        type: "string"
        description: "New value of indicator_name"
      data_source: 
        type: "string"
        description: "New value of data_source"
      description:
        type: "string"
        description: "New value of description"
      token:
        description: "New value of token"
        type: "array"
        items:
          type: "array"
          items:
            type: "string"
  MaxEventIdNum:
    type: "object"
    properties:
      max_event_id_num:
        type: "integer"
        format: "uint64"
        description: "the value of maximum number of event_ids"
  Outlier:
    type: "object"
    properties:
      data_source:
        type: "string"
        description: "Kafka topic name"
      event_ids:
        type: "array"
        items:
          type: "integer"
          format: "uint64"
        description: "list of event ids for this outlier"
      outlier:
        type: "string"
        description: "raw event in hex values for this outlier"
      size:
        type: "integer"
        format: "uint64"
        description: "The number of events for this cluster"
  OutlierCreateBody:
    type: "object"
    required:
    - "id"
    - "outlier"
    - "data_source"
    - "data_source_type"
    - "event_ids"
    - "size"
    properties:
      id:
        type: "integer"
        format: "uint32"
        description: "id of this outlier"
      outlier:
        type: "array"
        items:
          type: "integer"
          format: "uint8"
        description: "raw event for this outlier"
      data_source:
        type: "string"
        description: "Kafka topic name"
      data_source_type:
        type: "string"
        description: "a data type of this Kafka topic"
      event_ids:
        type: "array"
        items:
          type: "integer"
          format: "uint64"
        description: "list of event ids for this outlier"
      size:
        type: "integer"
        format: "uint32"
        description: "the number of event_ids for this outlier"
  DataSource:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "a unique id for this data_source"
      topic_name:
        type: "string"
        description: "kafka topic name"
      data_type:
        type: "string"
        description: "data type of this data_source"
  Qualifier:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "a unique id for this qualifier"
      description:
        type: "string"
        description: "qualifier name"
  QualifierUpdateBody:
    type: "object"
    required:
    - "cluster_id"
    - "data_source"
    - "qualifier"
    properties:
      cluster_id:
        type: "string"
        description: "cluster_id of the cluster whose qualifier is to be updated"
      data_source:
        type: "string"
        description: "data_source of the cluster whose qualifier is to be updated"
      qualifier: 
        type: "string"
        description: "new value of qualifier"
  Status:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "a unique id for this status"
      description:
        type: "string"
        description: "status name"
  Template:
    type: "object"
    properties:
      name:
        type: "string"
        description: "distinct template name"
      event_type:
        type: "string"
        description: "one of event types: Csv, Email, Log, Packet"
      method:
        type: "string"
        description: "one of methods: Distribution, Multidimension, Prefix"
      algorithm:
        type: "string"
        description: "machine learning algorithm"
      min_token_length:
        type: "integer"
        format: "uint32"
        description: "minimum token length for clustering packets"
      eps:
        type: "number"
        format: "double"
        description: "EPS used in multidimensional clustering"
      format:
        type: "string"
        description: |
          A JSON encoded value of an array of formats for CSV columns. A format includes:
            - `data_type:<string>` data type of a column
            - `weight:<double>` weight value regarding multidimensional clustering
            - `format:<string>` format for parsing
      dimension_default:
        type: "integer"
        format: "int64"
        description: "default enum dimension of CSV columns"
      dimensions:
        type: "array"
        items:
          type: "integer"
          format: "int64"
        description: "dimensions of CSV columns"
  TemplateCreateBody:
    type: "object"
    required:
    - "name"
    - "event_type"
    - "method"
    properties:
      name:
        type: "string"
        description: "distinct template name"
      event_type:
        type: "string"
        description: "one of event types: Csv, Email, Log, Packet"
      method:
        type: "string"
        description: "one of methods: Distribution, Multidimension, Prefix"
      algorithm:
        type: "string"
        description: "machine learning algorithm"
      min_token_length:
        type: "integer"
        format: "uint32"
        description: "minimum token length for clustering packets"
      eps:
        type: "number"
        format: "double"
        description: "EPS used in multidimensional clustering"
      format:
        type: "array"
        items:
          $ref: "#/definitions/FormatForTemplate"
        description: "formats of CSV columns"
      dimension_default:
        type: "integer"
        format: "uint32"
        description: "default enum dimension of CSV columns"
      dimensions:
        type: "array"
        items:
          type: "integer"
          format: "uint32"
        description: "dimensions of CSV columns"
  FormatForTemplate:
    type: "object"
    properties:
      data_type:
        type: "string"
        description: "data type of a column"
      weight:
        type: "number"
        format: "double"
        description: "weight value for multidimensional clustering"
      format:
        type: "string"
        description: "format for parsing"
  ErrorResponse:
    description: "Represents an error."
    type: "object"
    required: 
    - "message"
    properties:
      message:
        description: "The error message."
        type: "string"
    example:
      message: "Something went wrong."
